// Code generated by eddwise, DO NOT EDIT.


/**
 * @typedef match_ends
 * @property {player} winner 
 * @property {point[]} win_line 
 * @property {string} reason - reason can be "line" or "player_left" 
*/

/**
 * @typedef match_starts
 * @property {player} adversary 
 * @property {boolean} first_move 
 * @property {uint} columns 
 * @property {uint} rows 
*/

/**
 * @typedef player
 * @property {uint} id 
 * @property {string} name 
*/

/**
 * @typedef player_move
 * @property {player} [player] // ServerToClient
 * @property {uint} column 
 * @property {uint} [row] // ServerToClient
*/

/**
 * @typedef point
 * @property {uint} row 
 * @property {uint} column 
*/

/**
 * @typedef queue_request
*/

/**
 * @typedef welcome
 * @property {player} you 
*/
import {EddChannel} from "/filotto/edd.js";

class filottoChannel extends EddChannel {
	constructor() {
		super("filotto")
		Object.defineProperty(this, "getName", { configurable: false, writable: false, value: this.getName });
		Object.defineProperty(this, "setClient", { configurable: false, writable: false, value: this.setClient });
		Object.defineProperty(this, "route", { configurable: false, writable: false, value: this.route });

		Object.defineProperty(this, "player_move", { configurable: false, writable: false, value: this.sendplayer_move });
		Object.defineProperty(this, "queue_request", { configurable: false, writable: false, value: this.sendqueue_request });

		this._onmatch_endsFn = null;
		this._onmatch_startsFn = null;
		this._onplayer_moveFn = null;
		this._onwelcomeFn = null;
		this._connectedFn = null;
		this._disconnectedFn = null;
	}
	/**
     * @callback connectedCb
     */
    /**
     * @function filottoChannel#connected
     * @param {connectedCb} callback
     */
	connected(callback){
		this._connectedFn = callback;
	}

	/**
     * @callback disconnectedCb
     */
    /**
     * @function filottoChannel#disconnected
     * @param {disconnectedCb} callback
     */
	disconnected(callback){
		this._disconnectedFn = callback;
	}
	getName() {
		return "filotto"
	}
	getAlias() {
		return "filotto"
	}
	setClient(client) {
		this.client = client
	}
	route(name, body) {
		if(super.route(name,body,this.getAlias())){
            return
        }
		switch(name) {
			default:
				console.log("unexpected event ", name, "in channel filotto")
				break

			// match_ends
			case "match_ends":
				return this.onmatch_endsFn(body)
			// match_starts
			case "match_starts":
				return this.onmatch_startsFn(body)
			// player_move
			case "player_move":
				return this.onplayer_moveFn(body)
			// welcome
			case "welcome":
				return this.onwelcomeFn(body)
        }
    }


	/**
	 * @function filottoChannel#onmatch_endsFn
	 * @param {match_ends} event
	*/
    onmatch_endsFn(event) {
        if(this._onmatch_endsFn == null) {
            console.log("unhandled message 'ChangeName' received")
            return
        }
        this._onmatch_endsFn(event)
    }
    /**
     * @callback onmatch_endsCb
     * @param {match_ends} event
     */
    /**
     * @function filottoChannel#onmatch_ends
     * @param {onmatch_endsCb} callback
     */
     onmatch_ends(callback) {
        this._onmatch_endsFn = callback
    }

	/**
	 * @function filottoChannel#onmatch_startsFn
	 * @param {match_starts} event
	*/
    onmatch_startsFn(event) {
        if(this._onmatch_startsFn == null) {
            console.log("unhandled message 'ChangeName' received")
            return
        }
        this._onmatch_startsFn(event)
    }
    /**
     * @callback onmatch_startsCb
     * @param {match_starts} event
     */
    /**
     * @function filottoChannel#onmatch_starts
     * @param {onmatch_startsCb} callback
     */
     onmatch_starts(callback) {
        this._onmatch_startsFn = callback
    }

	/**
	 * @function filottoChannel#onplayer_moveFn
	 * @param {player_move} event
	*/
    onplayer_moveFn(event) {
        if(this._onplayer_moveFn == null) {
            console.log("unhandled message 'ChangeName' received")
            return
        }
        this._onplayer_moveFn(event)
    }
    /**
     * @callback onplayer_moveCb
     * @param {player_move} event
     */
    /**
     * @function filottoChannel#onplayer_move
     * @param {onplayer_moveCb} callback
     */
     onplayer_move(callback) {
        this._onplayer_moveFn = callback
    }

	/**
	 * @function filottoChannel#onwelcomeFn
	 * @param {welcome} event
	*/
    onwelcomeFn(event) {
        if(this._onwelcomeFn == null) {
            console.log("unhandled message 'ChangeName' received")
            return
        }
        this._onwelcomeFn(event)
    }
    /**
     * @callback onwelcomeCb
     * @param {welcome} event
     */
    /**
     * @function filottoChannel#onwelcome
     * @param {onwelcomeCb} callback
     */
     onwelcome(callback) {
        this._onwelcomeFn = callback
    }


    /**
     * @function filottoChannel#sendplayer_move
     * @param {player_move} message
     */
    sendplayer_move = function(message) {
        return this.client.send({channel:this.getAlias(), name:"player_move", body: message});
    }

    /**
     * @function filottoChannel#sendqueue_request
     * @param {queue_request} message
     */
    sendqueue_request = function(message) {
        return this.client.send({channel:this.getAlias(), name:"queue_request", body: message});
    }

}

export {filottoChannel}
