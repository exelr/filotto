// Code generated by eddwise, DO NOT EDIT.

/**
 * @typedef MatchEnds
 * @property {Player} Winner 
 * @property {Point[]} WinLine 
 * @property {string} Reason - Reason can be "line" or "player_left" 
 * @description MatchEnds sent from server to both players in a match when the match ends for whatever reason
*/

/**
 * @typedef MatchStarts
 * @property {uint} Rows 
 * @property {Player} Adversary 
 * @property {boolean} FirstMove 
 * @property {uint} Columns 
 * @description MatchStarts sent from server to two clients when the match is found for two players
*/

/**
 * @typedef Player
 * @property {uint} Id 
 * @property {string} Name 
*/

/**
 * @typedef PlayerMove
 * @property {Player} [Player] // ServerToClient
 * @property {uint} Column 
 * @property {uint} [Row] // ServerToClient
 * @description PlayerMove sent when client performs any move. Server will relay to adversary
*/

/**
 * @typedef Point
 * @property {uint} Row 
 * @property {uint} Column 
*/

/**
 * @typedef QueueRequest
*/

/**
 * @typedef Welcome
 * @property {Player} You 
 * @description Welcome is sent from server to client whenever connects
*/


class FilottoChannel {
	constructor() {
		Object.defineProperty(this, "getName", { configurable: false, writable: false, value: this.getName });
		Object.defineProperty(this, "setConn", { configurable: false, writable: false, value: this.setConn });
		Object.defineProperty(this, "route", { configurable: false, writable: false, value: this.route });

		Object.defineProperty(this, "PlayerMove", { configurable: false, writable: false, value: this.sendPlayerMove });
		Object.defineProperty(this, "QueueRequest", { configurable: false, writable: false, value: this.sendQueueRequest });

		this._onMatchEndsFn = null;
		this._onMatchStartsFn = null;
		this._onPlayerMoveFn = null;
		this._onWelcomeFn = null;
		this._connectedFn = null;
		this._disconnectedFn = null;
	}
	/**
     * @callback connectedCb
     */
    /**
     * @function FilottoChannel#connected
     * @param {connectedCb} callback
     */
	connected(callback){
		this._connectedFn = callback;
	}

	/**
     * @callback disconnectedCb
     */
    /**
     * @function FilottoChannel#disconnected
     * @param {disconnectedCb} callback
     */
	disconnected(callback){
		this._disconnectedFn = callback;
	}
	getName() {
		return "Filotto"
	}
	setConn(conn) {
		this.conn = conn
	}
	route(name, body) {
		switch(name) {
			default:
				console.log("unexpected event ", name, "in channel Filotto")
				break

			case "MatchEnds":
				return this.onMatchEndsFn(body)

			case "MatchStarts":
				return this.onMatchStartsFn(body)

			case "PlayerMove":
				return this.onPlayerMoveFn(body)

			case "Welcome":
				return this.onWelcomeFn(body)

        }
    }


	/**
	 * @function FilottoChannel#onMatchEndsFn
	 * @param {MatchEnds} event
	*/
    onMatchEndsFn(event) {
        if(this._onMatchEndsFn == null) {
            console.log("unhandled message 'ChangeName' received")
            return
        }
        this._onMatchEndsFn(event)
    }
    /**
     * @callback onMatchEndsCb
     * @param {MatchEnds} event
     */
    /**
     * @function FilottoChannel#onMatchEnds
     * @param {onMatchEndsCb} callback
     */
     onMatchEnds(callback) {
        this._onMatchEndsFn = callback
    }

	/**
	 * @function FilottoChannel#onMatchStartsFn
	 * @param {MatchStarts} event
	*/
    onMatchStartsFn(event) {
        if(this._onMatchStartsFn == null) {
            console.log("unhandled message 'ChangeName' received")
            return
        }
        this._onMatchStartsFn(event)
    }
    /**
     * @callback onMatchStartsCb
     * @param {MatchStarts} event
     */
    /**
     * @function FilottoChannel#onMatchStarts
     * @param {onMatchStartsCb} callback
     */
     onMatchStarts(callback) {
        this._onMatchStartsFn = callback
    }

	/**
	 * @function FilottoChannel#onPlayerMoveFn
	 * @param {PlayerMove} event
	*/
    onPlayerMoveFn(event) {
        if(this._onPlayerMoveFn == null) {
            console.log("unhandled message 'ChangeName' received")
            return
        }
        this._onPlayerMoveFn(event)
    }
    /**
     * @callback onPlayerMoveCb
     * @param {PlayerMove} event
     */
    /**
     * @function FilottoChannel#onPlayerMove
     * @param {onPlayerMoveCb} callback
     */
     onPlayerMove(callback) {
        this._onPlayerMoveFn = callback
    }

	/**
	 * @function FilottoChannel#onWelcomeFn
	 * @param {Welcome} event
	*/
    onWelcomeFn(event) {
        if(this._onWelcomeFn == null) {
            console.log("unhandled message 'ChangeName' received")
            return
        }
        this._onWelcomeFn(event)
    }
    /**
     * @callback onWelcomeCb
     * @param {Welcome} event
     */
    /**
     * @function FilottoChannel#onWelcome
     * @param {onWelcomeCb} callback
     */
     onWelcome(callback) {
        this._onWelcomeFn = callback
    }


    /**
     * @function FilottoChannel#sendPlayerMove
     * @param {PlayerMove} message
     */
    sendPlayerMove = function(message) {
        this.conn.send( JSON.stringify({channel:this.getName(), name:"PlayerMove", body: message}) );
    }

    /**
     * @function FilottoChannel#sendQueueRequest
     * @param {QueueRequest} message
     */
    sendQueueRequest = function(message) {
        this.conn.send( JSON.stringify({channel:this.getName(), name:"QueueRequest", body: message}) );
    }

}

