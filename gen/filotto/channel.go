// Code generated by eddwise, DO NOT EDIT.

package filotto

import (
	"errors"

	"github.com/exelr/eddwise"
)

var _ eddwise.ImplChannel = (*Filotto)(nil)
var _ FilottoRecv = (*Filotto)(nil)

type FilottoRecv interface {
	OnPlayerMove(eddwise.Context, *PlayerMove) error
	OnQueueRequest(eddwise.Context, *QueueRequest) error
}

type Filotto struct {
	server eddwise.Server
	recv   FilottoRecv
}

func (ch *Filotto) Name() string {
	return "filotto"
}

func (ch *Filotto) Alias() string {
	return "filotto"
}

func (ch *Filotto) Bind(server eddwise.Server) error {
	ch.server = server
	return nil
}

func (ch *Filotto) SetReceiver(chr eddwise.ImplChannel) error {
	if _, ok := chr.(FilottoRecv); !ok {
		return errors.New("unexpected channel type while SetReceiver on 'Filotto' channel")
	}
	ch.recv = chr.(FilottoRecv)
	return nil
}

func (ch *Filotto) GetServer() eddwise.Server {
	return ch.server
}

func (ch *Filotto) Route(ctx eddwise.Context, evt *eddwise.EventMessage) error {
	switch evt.Name {
	default:
		return eddwise.ErrMissingServerHandler(evt.Channel, evt.Name)

	// player_move
	case "player_move":
		var msg = &PlayerMove{}
		if err := ch.server.Codec().Decode(evt.Body, msg); err != nil {
			return err
		}
		if err := msg.CheckReceivedFields(); err != nil {
			return err
		}
		return ch.recv.OnPlayerMove(ctx, msg)
	// queue_request
	case "queue_request":
		var msg = &QueueRequest{}
		if err := ch.server.Codec().Decode(evt.Body, msg); err != nil {
			return err
		}
		if err := msg.CheckReceivedFields(); err != nil {
			return err
		}
		return ch.recv.OnQueueRequest(ctx, msg)
	}
}

func (ch *Filotto) OnPlayerMove(eddwise.Context, *PlayerMove) error {
	return errors.New("event 'PlayerMove' is not handled on server")
}

func (ch *Filotto) OnQueueRequest(eddwise.Context, *QueueRequest) error {
	return errors.New("event 'QueueRequest' is not handled on server")
}

func (ch *Filotto) SendMatchEnds(client eddwise.Client, msg *MatchEnds) error {
	return client.Send(ch.Alias(), msg)
}

func (ch *Filotto) SendMatchStarts(client eddwise.Client, msg *MatchStarts) error {
	return client.Send(ch.Alias(), msg)
}

func (ch *Filotto) SendPlayerMove(client eddwise.Client, msg *PlayerMove) error {
	return client.Send(ch.Alias(), msg)
}

func (ch *Filotto) SendWelcome(client eddwise.Client, msg *Welcome) error {
	return client.Send(ch.Alias(), msg)
}

func (ch *Filotto) BroadcastMatchEnds(clients []eddwise.Client, msg *MatchEnds) error {
	return eddwise.Broadcast(ch.Alias(), msg, clients)
}

func (ch *Filotto) BroadcastMatchStarts(clients []eddwise.Client, msg *MatchStarts) error {
	return eddwise.Broadcast(ch.Alias(), msg, clients)
}

func (ch *Filotto) BroadcastPlayerMove(clients []eddwise.Client, msg *PlayerMove) error {
	return eddwise.Broadcast(ch.Alias(), msg, clients)
}

func (ch *Filotto) BroadcastWelcome(clients []eddwise.Client, msg *Welcome) error {
	return eddwise.Broadcast(ch.Alias(), msg, clients)
}

// Event structures

type MatchEnds struct {
	Winner  Player  `json:"winner"`
	WinLine []Point `json:"win_line"`
	// Reason can be "line" or "player_left"
	Reason string `json:"reason"`
}

func (evt *MatchEnds) GetEventName() string {
	return "match_ends"
}

func (evt *MatchEnds) ProtocolAlias() string {
	return "match_ends"
}

func (evt *MatchEnds) CheckSendFields() error {
	return nil
}

func (evt *MatchEnds) CheckReceivedFields() error {
	return nil
}

type MatchStarts struct {
	Adversary Player `json:"adversary"`
	FirstMove bool   `json:"first_move"`
	Columns   uint64 `json:"columns"`
	Rows      uint64 `json:"rows"`
}

func (evt *MatchStarts) GetEventName() string {
	return "match_starts"
}

func (evt *MatchStarts) ProtocolAlias() string {
	return "match_starts"
}

func (evt *MatchStarts) CheckSendFields() error {
	return nil
}

func (evt *MatchStarts) CheckReceivedFields() error {
	return nil
}

type Player struct {
	Id   uint64 `json:"id"`
	Name string `json:"name"`
}

func (evt *Player) GetEventName() string {
	return "player"
}

func (evt *Player) ProtocolAlias() string {
	return "player"
}

func (evt *Player) CheckSendFields() error {
	return nil
}

func (evt *Player) CheckReceivedFields() error {
	return nil
}

type PlayerMove struct {
	Player *Player `json:"player,omitempty"` // ServerToClient
	Column uint    `json:"column"`
	Row    *uint   `json:"row,omitempty"` // ServerToClient
}

func (evt *PlayerMove) GetEventName() string {
	return "player_move"
}

func (evt *PlayerMove) ProtocolAlias() string {
	return "player_move"
}

func (evt *PlayerMove) CheckSendFields() error {
	return nil
}

func (evt *PlayerMove) CheckReceivedFields() error {
	if evt.Player != nil {
		return errors.New("PlayerMove.Player is an invalid field")
	}
	if evt.Row != nil {
		return errors.New("PlayerMove.Row is an invalid field")
	}
	return nil
}
func (evt *PlayerMove) SetPlayer(player Player) *PlayerMove {
	evt.Player = &player
	return evt
}
func (evt *PlayerMove) SetRow(row uint) *PlayerMove {
	evt.Row = &row
	return evt
}

type Point struct {
	Row    uint `json:"row"`
	Column uint `json:"column"`
}

func (evt *Point) GetEventName() string {
	return "point"
}

func (evt *Point) ProtocolAlias() string {
	return "point"
}

func (evt *Point) CheckSendFields() error {
	return nil
}

func (evt *Point) CheckReceivedFields() error {
	return nil
}

type QueueRequest struct {
}

func (evt *QueueRequest) GetEventName() string {
	return "queue_request"
}

func (evt *QueueRequest) ProtocolAlias() string {
	return "queue_request"
}

func (evt *QueueRequest) CheckSendFields() error {
	return nil
}

func (evt *QueueRequest) CheckReceivedFields() error {
	return nil
}

type Welcome struct {
	You Player `json:"you"`
}

func (evt *Welcome) GetEventName() string {
	return "welcome"
}

func (evt *Welcome) ProtocolAlias() string {
	return "welcome"
}

func (evt *Welcome) CheckSendFields() error {
	return nil
}

func (evt *Welcome) CheckReceivedFields() error {
	return nil
}
